"""
    Oy Provider Modules
    ____________________
    Full reference:
    https://api-docs.oyindonesia.com/
"""
import uuid

from oy.core.provider import BaseProvider
from oy.urls import URLS
from oy.serializers import (
    InquiryAccountSchema,
    DisburseSchema,
    DisburseStatusSchema,
    GetBalanceSchema,
    GenerateVaSchema
)


class OyProvider(BaseProvider):
    """
        Oy Provider
    """

    def _api_name_to_full_url(self, api_name):
        """ using base url that generated by base
        provider we build right url """
        return self.base_url + URLS[api_name]

    def prepare_request(self, **kwargs):
        self.request_contract.url = self._api_name_to_full_url(
            kwargs["api_name"]
        )
        self.request_contract.method = kwargs["method"]
        if "payload" in kwargs:
            self.request_contract.payload = kwargs["payload"]

    def inquiry_account(self, bank_code, account_no):
        """
            Bank Account Inquiry
            This API is mandatory to hit before remit API.
            Use this API to get beneficiary account details.

            Parameters:
                bank_code : string
                account_no: string

            Returns:
                bank_code: string
                account_no: string
                name: string
        """
        payload = {
            "api_name": "INQUIRY_ACCOUNT",
            "method": "POST",
            "payload": {
                "recipient_bank": bank_code,
                "recipient_account": account_no
            }
        }
        response = self.execute(**payload)
        # serialize response through serializer so if any change in response
        # don't stop the flow
        serialized_response = InquiryAccountSchema().load(response)
        return serialized_response

    def disburse(self, bank_code, account_no, amount, note=None, trx_id=None):
        """
            Use this API to start disbursing money to a specific beneficiary account.

            Parameters:
                bank_code : string
                account_no: string
                amount: decimal
                note: string (optional)
                trx_id: string (optional)

            Returns:
                bank_code: string
                account_no: string
                amount: decimal
                trx_reference: string
        """
        if trx_id is None:
            trx_id = str(uuid.uuid4())

        if note is None:
            note = "Transfer {}".format(trx_id)

        payload = {
            "api_name": "DISBURSE",
            "method": "POST",
            "payload": {
                "recipient_bank": bank_code,
                "recipient_account": account_no,
                "amount": amount,
                "note": note,
                "partner_trx_id": trx_id,
            }
        }
        response = self.execute(**payload)
        serialized_response = DisburseSchema().load(response)
        return serialized_response

    def disburse_status(self, trx_reference):
        """
            To get status of a disbursement request, you can call this API.
            You may need to call this API few times until getting a final status (success / failed)

            Parameters:
                trx_reference : string

            Returns:
                bank_code: string
                name: string
                account_no: string
                trx_id: string
                trx_reference: string
                amount: decimal
                timestamp: string
                created_date: string
                last_updated_at: string
        """
        payload = {
            "api_name": "DISBURSE_STATUS",
            "method": "POST",
            "payload": {
                "partner_trx_id": trx_reference
            }
        }
        response = self.execute(**payload)
        serialized_response = DisburseStatusSchema().load(response)
        return serialized_response

    def get_balance(self):
        """
            Use this API to get partner balance.

            Returns:
                balance: decimal
        """
        payload = {
            "api_name": "GET_BALANCE",
            "method": "GET",
        }
        response = self.execute(**payload)
        serialized_response = GetBalanceSchema().load(response)
        return serialized_response

    def generate_va(self, bank_code, amount, va_id=None):
        """
            Use this API to generate VA number

            Parameters:
                bank_code : string
                amount : string
                va_id : string (optional)

            Returns:
                va_no:  string
                amount: decimal
        """
        payload = {
            "api_name": "GENERATE_VA",
            "method": "POST",
            "payload": {
                "partner_user_id": va_id,
                "bank_code": bank_code,
                "amount": amount
            }
        }
        response = self.execute(**payload)
        serialized_response = GenerateVaSchema().load(response)
        return serialized_response
